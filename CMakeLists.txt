
# This file was generated by the build system used internally in the Yandex monorepo.
# Only simple modifications are allowed (adding source-files to targets, adding simple properties
# like target_include_directories). These modifications will be ported to original
# ya.make files by maintainers. Any complex modifications which can't be ported back to the
# original buildsystem will not be accepted.


cmake_minimum_required(VERSION 3.15)
project(YT LANGUAGES C CXX ASM)

set(CMAKE_C_COMPILER_LAUNCHER ccache)
set(CMAKE_CXX_COMPILER_LAUNCHER ccache)

set(BUILD_SHARED_LIBS Off)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_EXTENSIONS Off)
set(YT_MAX_LINK_JOBS 5 CACHE STRING "Maximum parallel link jobs for Ninja generator")
set_property(GLOBAL PROPERTY JOB_POOLS link_jobs=${YT_MAX_LINK_JOBS})
set(CMAKE_JOB_POOL_LINK link_jobs)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/cmake)
include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR})
list(APPEND CMAKE_CTEST_ARGUMENTS "--output-on-failure")
enable_testing()

# Disable 'empty CUDA_ARCHITECTURES not allowed' warning
# Can't set it in cuda.cmake because of CMake policy subdirectory stack rules
cmake_policy(SET CMP0104 OLD)

include(cmake/archive.cmake)
include(cmake/bison.cmake)
include(cmake/common.cmake)
include(cmake/conan.cmake)
include(cmake/fbs.cmake)
include(cmake/global_flags.cmake)
include(cmake/llvm-tools.cmake)
include(cmake/protobuf.cmake)
include(cmake/shared_libs.cmake)
include(cmake/global_vars.cmake)

if (CMAKE_CROSSCOMPILING)
  include(${CMAKE_BINARY_DIR}/conan_paths.cmake)
else()
  conan_cmake_autodetect(settings)
  conan_cmake_install(
    PATH_OR_REFERENCE ${CMAKE_SOURCE_DIR}
    INSTALL_FOLDER ${CMAKE_BINARY_DIR}
    BUILD missing
    REMOTE conancenter
    SETTINGS ${settings}
      ENV "CONAN_CMAKE_GENERATOR=${CMAKE_GENERATOR}"
      CONF "tools.cmake.cmaketoolchain:generator=${CMAKE_GENERATOR}"
  )
endif()

if (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND NOT HAVE_CUDA)
  include(CMakeLists.linux-x86_64.txt)
endif()


function(get_subdirectories SUBDIRS DIR)
	get_directory_property(NEW_SUBDIRS DIRECTORY "${DIR}" SUBDIRECTORIES)

	foreach(CURRENT_SUBDIR IN LISTS NEW_SUBDIRS)
		get_subdirectories(REC_SUBDIRS "${CURRENT_SUBDIR}")
		list(APPEND SUBDIRS ${REC_SUBDIRS})
	endforeach()

	list(APPEND SUBDIRS ${NEW_SUBDIRS})

	set(${SUBDIRS} PARENT_SCOPE)
endfunction()


function(get_lib_targets DEFINED_TARGETS DIR)
	get_subdirectories(SUBDIRS "${DIR}")

	if(EXISTS "${DIR}/CMakeLists.txt")
		list(APPEND SUBDIRS "${DIR}")
	endif()

	foreach(CURRENT_SUBDIR IN LISTS SUBDIRS)
		get_directory_property(NEW_TARGETS DIRECTORY "${CURRENT_SUBDIR}" BUILDSYSTEM_TARGETS)

		foreach(CURRENT_TARGET IN LISTS NEW_TARGETS)
			get_target_property(TARGET_TYPE "${CURRENT_TARGET}" TYPE)

			if("${TARGET_TYPE}" MATCHES "STATIC_LIBRARY|MODULE_LIBRARY|SHARED_LIBRARY")
				list(APPEND DEFINED_TARGETS ${CURRENT_TARGET})
			endif()
		endforeach()
	endforeach()

	set(${DEFINED_TARGETS} PARENT_SCOPE)
endfunction()

function(target_starts_with PREFIXES TARGET RESULT)
    set(${RESULT} FALSE PARENT_SCOPE)
    foreach(PREFIX IN LISTS PREFIXES)
        string(FIND ${TARGET} ${PREFIX} POSITION)
        if(POSITION EQUAL 0)
            set(${RESULT} TRUE PARENT_SCOPE)
            break()
        endif()
    endforeach()
endfunction()

if(ENABLE_FUZZER OR DISABLE_YT_VERIFY)
    # Exclude lib targets that are used by EXECUTABLE targets (e.g. protoc, enum_parser, etc) needed to build fuzz-tests
    set(EXCLUDED_TARGETS "yutil" "library-cpp-cpuid_check.global" "cpp-getopt-small" "tools-enum_parser-parse_enum"
        "llvm16-lib-Demangle" "llvm16-lib-Support" "llvm16-lib-TableGen" "utils-TableGen-GlobalISel"
        "cpp-sanitizer-include" "libs-flatbuffers-flatc" "util-charset" "libs-cxxsupp-libcxx" "libs-tcmalloc-no_percpu_cache"
        "src-compiler-grpc_plugin_support" "blockcodecs-codecs-zstd.global" "cpp-blockcodecs-core" "library-cpp-cppparser"
        "library-cpp-colorizer" "library-cpp-resource")

    set(TARGET_PREFIXES "contrib-libs" "libs-" "abseil-")

    get_lib_targets(DEFINED_TARGETS "${CMAKE_CURRENT_SOURCE_DIR}")

    foreach(target IN LISTS DEFINED_TARGETS)
        target_starts_with("${TARGET_PREFIXES}" ${target} STARTS_WITH_PREFIX)
        list(FIND EXCLUDED_TARGETS ${target} EXCLUDED_TARGET_POS)

        if (ENABLE_FUZZER)
            if(STARTS_WITH_PREFIX OR NOT EXCLUDED_TARGET_POS EQUAL -1)
                message(STATUS "Skipping -fsanitize=fuzzer for target: ${target}")
            else()
                if (ENABLE_COVERAGE)
                    target_compile_options(${target} PRIVATE -fsanitize=fuzzer -fprofile-instr-generate -fcoverage-mapping)
                    target_link_options(${target} PRIVATE -fsanitize=fuzzer -fprofile-instr-generate -fcoverage-mapping)
                else()
                    target_compile_options(${target} PRIVATE -fsanitize=fuzzer)
                    target_link_options(${target} PRIVATE -fsanitize=fuzzer)
                endif()
                message(STATUS "Adding -fsanitize=fuzzer to target: ${target}")
            endif()
            target_compile_definitions(${target} PRIVATE ENABLE_FUZZER=1)
        endif()
        if (DISABLE_YT_VERIFY)
            target_compile_definitions(${target} PRIVATE DISABLE_YT_VERIFY=1)
        endif()
    endforeach()
endif()
